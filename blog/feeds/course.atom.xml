<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Spring 協同產品設計實習 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/course.atom.xml" rel="self"></link><id>./</id><updated>2017-06-08T00:00:00+08:00</updated><entry><title>20170608 第十六週</title><link href="./2017spring-cd-W16.html" rel="alternate"></link><published>2017-06-08T00:00:00+08:00</published><updated>2017-06-08T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-06-08:./2017spring-cd-W16.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;協同產品設計實習課程 第十六週&lt;/h2&gt;</summary><category term="syllabus"></category><category term="w16"></category></entry><entry><title>20170601 第十五週</title><link href="./2017spring-cd-W15.html" rel="alternate"></link><published>2017-06-01T00:00:00+08:00</published><updated>2017-06-01T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-06-01:./2017spring-cd-W15.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;協同產品設計實習課程 第十五週&lt;/h2&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear2_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)

        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a

        rb=rp*math.cos(pa*deg)

        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
ctx.beginPath() 
ctx.lineWidth="600"
ctx.strokeStyle="white"
ctx.moveTo(0,600) 
ctx.lineTo(800,600) 
ctx.stroke()

ctx.beginPath() 
ctx.lineWidth="3"
ctx.strokeStyle="red"
ctx.moveTo(0,300) 
ctx.lineTo(800,300) 
ctx.stroke()
&lt;/script&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear3" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear3_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)

        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a

        rb=rp*math.cos(pa*deg)

        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear3']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2+2400
r = 8*(canvas.height/2)
# 齒數
n = 23
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath() 
ctx.lineWidth="3"
ctx.strokeStyle="red"
ctx.moveTo(0,600) 
ctx.lineTo(800,600) 
ctx.stroke()

ctx.beginPath()
ctx.fillStyle = "   #2894FF"
ctx.font = "35px ScriptS"
ctx.fillText("40423146 ",330,450)
ctx.stroke()
&lt;/script&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id='gear4' width='1400' height='1200'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear4" 的 canvas 中繪圖
canvas = doc["gear4"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 14
# 第2齒輪齒數
n_g2 = 16
# 第3齒輪齒數
n_g3 = 18
# 第4齒輪齒數
n_g4 = 20
# 第5齒輪齒數
n_g5 = 22
# 第6齒輪齒數
n_g6 = 24
# 第7齒輪齒數
n_g7 = 26
# 第8齒輪齒數
n_g8 = 28
# 第8齒輪齒數
n_g9 = 30
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.6*canvas.width)/(n_g1+n_g2+n_g3+n_g4)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
rp_g4 = m*n_g4/2
rp_g5 = m*n_g5/2
rp_g6 = m*n_g6/2
rp_g7 = m*n_g7/2
rp_g8 = m*n_g8/2
rp_g9 = m*n_g9/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "red")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.05+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.1+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 第4齒輪的圓心座標
x_g4 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g4 = y_g1

# 第5齒輪的圓心座標
x_g5 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g5 = y_g4+rp_g4+rp_g5

# 第6齒輪的圓心座標
x_g6 =x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g6 = y_g5+rp_g5+rp_g6

# 第7齒輪的圓心座標
x_g7 =x_g6-rp_g6-rp_g7
y_g7 = y_g5+rp_g5+rp_g6

# 第8齒輪的圓心座標
x_g8 =x_g7-rp_g7-rp_g8
y_g8 = y_g5+rp_g5+rp_g6

# 第8齒輪的圓心座標
x_g8 =x_g7-rp_g7-rp_g8
y_g8 = y_g5+rp_g5+rp_g6

# 第9齒輪的圓心座標
x_g9 =x_g7-rp_g7-rp_g8
y_g9 = y_g8+rp_g8+rp_g9

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)

# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "red")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423114 ",x_g1-20, y_g1)
ctx.stroke()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "orange")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423120 ",x_g2-20, y_g2)
ctx.stroke()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "yellow")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423123 ",x_g3-20, y_g3)
ctx.stroke()

# 將第4齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g4, y_g4)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g4+(math.pi+math.pi/n_g3)*n_g3/n_g4*2)
# put it back
ctx.translate(-x_g4, -y_g4)
Spur(ctx).Gear(x_g4, y_g4, rp_g4, n_g4, pa, "green")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423124 ",x_g4-20, y_g4)
ctx.stroke()


# 將第5齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g5, y_g5)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g5+(math.pi+math.pi/n_g4)*n_g4/n_g5*2)
# put it back
ctx.translate(-x_g5, -y_g5)
Spur(ctx).Gear(x_g5, y_g5, rp_g5, n_g5, pa, "blue")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423141 ",x_g5-20, y_g5)
ctx.stroke()


# 將第6齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g6, y_g6)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g6+(math.pi+math.pi/n_g5)*n_g5/n_g6*2)
# put it back
ctx.translate(-x_g6, -y_g6)
Spur(ctx).Gear(x_g6, y_g6, rp_g6, n_g6, pa, "green")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423143 ",x_g6-20, y_g6)
ctx.stroke()


# 將第7齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g7, y_g7)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g7+(math.pi+math.pi/n_g6)*n_g6/n_g7)
# put it back
ctx.translate(-x_g7, -y_g7)
Spur(ctx).Gear(x_g7, y_g7, rp_g7, n_g7, pa, "yellow")
ctx.restore()

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423146 ",x_g7-20, y_g7)
ctx.stroke()

# 將第8齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g8, y_g8)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g8+(math.pi+math.pi/n_g7)*n_g7/n_g8*2)
# put it back
ctx.translate(-x_g8, -y_g8)
Spur(ctx).Gear(x_g8, y_g8, rp_g8, n_g8, pa, "orange")
ctx.restore() 

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40443147 ",x_g8-20, y_g8)
ctx.stroke()

# 將第9齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g9, y_g9)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g9+(math.pi+math.pi/n_g7)*n_g7/n_g9*2)
# put it back
ctx.translate(-x_g9, -y_g9)
Spur(ctx).Gear(x_g9, y_g9, rp_g9, n_g9, pa, "purple")
ctx.restore() 

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40443154 ",x_g9-20, y_g9)
ctx.stroke()
&lt;/script&gt;</summary><category term="syllabus"></category><category term="w15"></category></entry><entry><title>20170511 第十二週</title><link href="./2017spring-cd-W12.html" rel="alternate"></link><published>2017-05-11T00:00:00+08:00</published><updated>2017-05-11T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-05-11:./2017spring-cd-W12.html</id><summary type="html">&lt;p&gt;三種正齒輪嚙合&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第十二週&lt;/h2&gt;
&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id='gear3' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 17
# 第2齒輪齒數
n_g2 = 11
# 第3齒輪齒數
n_g3 = 13
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.8*canvas.width)/(n_g1+n_g2+n_g3)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.1+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.2+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "black")
ctx.restore()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "blue")
ctx.restore()

#
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "black")
ctx.restore()
&lt;/script&gt;</summary><category term="syllabus"></category><category term="w12"></category></entry><entry><title>20170504 第十一週</title><link href="./2017spring-cd-W11.html" rel="alternate"></link><published>2017-05-04T00:00:00+08:00</published><updated>2017-05-04T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-05-04:./2017spring-cd-W11.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;協同產品設計實習課程 第十一週&lt;/h2&gt;</summary><category term="syllabus"></category><category term="w11"></category></entry><entry><title>20170427 第十週</title><link href="./2017spring-cd-W10.html" rel="alternate"></link><published>2017-04-27T00:00:00+08:00</published><updated>2017-04-27T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-04-27:./2017spring-cd-W10.html</id><summary type="html">&lt;p&gt;加減乘除運算&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第十週&lt;/h2&gt;
&lt;p&gt;1.加法&lt;/p&gt;
&lt;pre class="brush: python"&gt;
加法
def add(a, b):
    return a+b

加法運算  
import sys
sys.path.append("./m1")
import add

sum = add.add(a, b)
print(sum)

&lt;/pre&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ES-tNryQ4oM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;2減法 &lt;/p&gt;
&lt;pre class="brush: python"&gt;
減法
def minus(a, b):
    return a-b

減法運算  
import sys
sys.path.append("./m1")
import minus

sum = minus.minus(a, b)
print(sum)

&lt;/pre&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_5nqGaIa9cQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;3.乘法 &lt;/p&gt;
&lt;pre class="brush: python"&gt;
乘法
def cross(a, b):
    return a*b

乘法運算  
import sys
sys.path.append("./m1")
import cross

sum = cross.cross(a, b)
print(sum)

&lt;/pre&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/8MCETHWWo2c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;4.除法&lt;/p&gt;
&lt;pre class="brush: python"&gt;
除法
def div(a, b):
    return a/b

除法運算  
import sys
sys.path.append("./m1")
import div 

sum = div.div(a,b)
print(sum)

&lt;/pre&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/p26d9BmPAv0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="syllabus"></category><category term="w10"></category></entry><entry><title>20170420 第九週</title><link href="./2017spring-cd-W9.html" rel="alternate"></link><published>2017-04-20T00:00:00+08:00</published><updated>2017-04-20T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-04-20:./2017spring-cd-W9.html</id><summary type="html">&lt;p&gt;期中作業&lt;/p&gt;
&lt;p&gt;分析四連桿軌跡圖&lt;/p&gt;
&lt;p&gt;使用 OnShape 完成四連桿行走機構&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第九週&lt;/h2&gt;
&lt;p&gt;分析四連桿軌跡圖&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/W9/46.png" width="560" /&gt;&lt;/p&gt;
&lt;p&gt;使用 OnShape 完成四連桿行走機構&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EORo8OShl58" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;分組協同零件展示&lt;/p&gt;

&lt;p&gt;&lt;link href="./../data/madeleine/src/css/Madeleine.css" rel="stylesheet"&gt;
&lt;script src="./../data/madeleine/src/stats.js"&gt;&lt;/script&gt;
&lt;script src="./../data/madeleine/src/detector.js"&gt;&lt;/script&gt;
&lt;script src="./../data/madeleine/src/three.min.js"&gt;&lt;/script&gt;
&lt;script src="./../data/madeleine/src/Madeleine.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div id="target" class="madeleine"&gt;&lt;/div&gt;

&lt;script&gt;
window.onload = function(){
    var madeleine = new Madeleine({
      target: 'target', // target div id
      data: './../data/w9/Fourbar1.stl', // data path
      path: './../data/madeleine/src/' // path to source directory from current html file
    });
}; 
&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r68/three.min.js"
&gt;&lt;/script&gt;

&lt;script src="https://rawgit.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js"
&gt;&lt;/script&gt;

&lt;script src="./../data/w9/loader.js"&gt;&lt;/script&gt;

&lt;script src="./../data/w9/stl.js"&gt;&lt;/script&gt;

&lt;div&gt;
select stl file: &lt;input type="file" id="file" /&gt; or drop stl file
&lt;/div&gt;

&lt;div id="view"&gt;&lt;/div&gt;</summary><category term="syllabus"></category><category term="w9"></category></entry><entry><title>20170413 第八週</title><link href="./2017spring-cd-W8.html" rel="alternate"></link><published>2017-04-13T00:00:00+08:00</published><updated>2017-04-13T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-04-13:./2017spring-cd-W8.html</id><summary type="html">&lt;p&gt;期中自評&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第八週&lt;/h2&gt;
&lt;p&gt;期中自評&lt;/p&gt;</summary><category term="syllabus"></category><category term="w8"></category></entry><entry><title>20170406 第七週</title><link href="./2017spring-cd-W7.html" rel="alternate"></link><published>2017-04-06T00:00:00+08:00</published><updated>2017-04-06T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-04-06:./2017spring-cd-W7.html</id><summary type="html">&lt;p&gt;利用fossil對倉儲進行管理練習&lt;/p&gt;
&lt;p&gt;利用Onshape繪製八連桿&lt;/p&gt;
&lt;p&gt;將八連桿導入V-rep並以馬達驅動&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第七週&lt;/h2&gt;
&lt;p&gt;八連桿模擬&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/4P4Il2t7Ir4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Onshape繪製八連桿&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hrk2liTa4Pk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Onshape繪製八組立&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/YUx1ad5QnOc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;導入v-rep&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/n1c8C8TyJjA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="syllabus"></category><category term="w7"></category></entry><entry><title>20170330 第六週</title><link href="./2017spring-cd-W6.html" rel="alternate"></link><published>2017-03-30T00:00:00+08:00</published><updated>2017-03-30T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-03-30:./2017spring-cd-W6.html</id><summary type="html">&lt;p&gt;Onshape繪製四連桿，並導V-rep驅動連桿&lt;/p&gt;


&lt;p&gt;利用Onshape繪製四連桿，並導入V-rep以馬達驅動&lt;/p&gt;
&lt;h2&gt;協同產品設計實習課程 第六週&lt;/h2&gt;
&lt;p&gt;Onshape繪製四連桿&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/zSwzX6S6JuE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Onshape繪製四連桿&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/PLJNTD3p6aE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;導入v-rep&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/CixU-Ca8QlI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;在Onshape可以設定參數，標註尺寸時輸入 #參數名稱，能方便設計變更&lt;/p&gt;</summary><category term="syllabus"></category><category term="w6"></category></entry><entry><title>20170323 第五週</title><link href="./2017spring-cd-W5.html" rel="alternate"></link><published>2017-03-23T00:00:00+08:00</published><updated>2017-03-23T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-03-23:./2017spring-cd-W5.html</id><summary type="html">&lt;p&gt;將單連桿導入V-rep並使其作動&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第五週&lt;/h2&gt;
&lt;p&gt;在 V-rep 設定單連桿運動&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/jKEgXGuFcGA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="syllabus"></category><category term="w5"></category></entry><entry><title>20170316 第四週</title><link href="./2017spring-cd-W4.html" rel="alternate"></link><published>2017-03-16T00:00:00+08:00</published><updated>2017-03-16T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-03-16:./2017spring-cd-W4.html</id><summary type="html">&lt;p&gt;Fossil新增組員以及組員權限設定&lt;/p&gt;
&lt;p&gt;solvespace 、Onshape繪製單連桿機構並轉出stl檔案&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第四週&lt;/h2&gt;
&lt;p&gt;在 https://mde2a2.kmol.info 主機上建立 cdbg7 線上 Fossil SCM 倉儲, 用來管理各組協同產品設計實習過程中的純文件檔案&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde2a2.kmol.info/cdag7/home"&gt;第七組 FOSSIL SCM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Solvespace one_link繪製&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/q_CyzrqMEPw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;導入v-rep&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/9UxPvOS89yw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="syllabus"></category><category term="w4"></category></entry><entry><title>20170302 第三週</title><link href="./2017spring-cd-W3.html" rel="alternate"></link><published>2017-03-09T00:00:00+08:00</published><updated>2017-03-09T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-03-09:./2017spring-cd-W3.html</id><summary type="html">&lt;p&gt;翻譯影片，並打出逐字稿&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第三週&lt;/h2&gt;
&lt;p&gt;翻譯影片&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/207229488" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/207229488"&gt;hyperworks2&lt;/a&gt; from &lt;a href="https://vimeo.com/user24079973"&gt;虎尾科大機械設計工程&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;內容: &lt;/p&gt;
&lt;p&gt;The 2017 HyperWorks release has a lot
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;在2017年HyperWorks發行很多版本&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;of enhancements to the modeling and assembly capabilities
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;對軟件的建模和組裝能力的增強&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;So we put in a new parts browser with a built-in part library
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;所以我們在一個新的零件瀏覽器與一個內置零件庫&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;The part library is a great tool for storing and loading work in progress
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;零件庫是用於存儲和加載正在進行工作的一個很好的工具&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;So you can store a catalog of all the common parts
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;因此，您可以存儲所有公共部分的目錄&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;that a workgroup needs to use,so they can download their models from their PLM system
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;工作組需要使用，因此他們可以從他們的PLM系統下載他們的模型&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;and store them locally in a parts library for a work in progress
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;並將它們本地存儲在正在進行的工作的零件庫中&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;And it keeps revision control on them
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;他保持對它們的修訂控制&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;so they can back up to the different versions and reload
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;所以他們可以備份到不同的版本並重新加載&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;And they can also build different configurations now of their models
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;他們也可以建立不同的配置到他們現在的的模型&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;In the configuration modeler now
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;現在在配置建模器&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;they can import parts from part library and then group
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;他們可以從零件庫導入零件然後分組&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;them into what we call part sets,which are
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;他們變成我們所說的部分集&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;convenient groupings of parts
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;即零件方便分組&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;And then they can drag those parts together into assemblies
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;然後他們可以將這些部分一起拖入組件&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;and configure them for different load
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;並為不同負載配置它們的&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;cases or different variations of their models
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;情況或他們的模型的不同變化&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;the other feature of haveing parts in the software
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;硬件部分的軟件中的另一個特點&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;is we do part instancing now,too
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;我們現在也做實例化&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;So if you load in a part that has
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;所以如果你加載在一個部分&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;multiple instances through the model,we support that
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;我們支持多個實例通過模型&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;We don't have to create multiple copies of it
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;我們不必創建它的多個副本&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;We can actually do the instancing,which is very memory efficient
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;我們可以做實際，這是非常有效的記憶&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Also in the model building assembly
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;也在模型建築組裝&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;tool set is enhanced ID management as well
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;工具集也是增強的ID管理&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;So not only can we assign IDs based on different rules
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;因此，我們不僅可以根據不同的規則分配ID&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;that you define in the software,but you can import ID systems
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;您可以在軟件中定義，但可以導入ID系統&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;form spreadsheets,XML files,databases
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;形式電子表格，XML文件，數據庫&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;and so forth,that are then used when
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;等等，然後在使用&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;it does the renumbering or the assembly of the model
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;它進行重新編號或模型的組裝&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;it has to resolve part collisions
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;它必須解決部分碰撞&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Really important part of doing model assembly
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;做模型組裝重要的部分&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;is connecting all those parts together
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;將所有這些部分連接在一起&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Connectors are really vital to the overall assembly process
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;連接器對整個裝配過程至關重要&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;The quality of the connector that you create really
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;您真正創建的連接器的質量&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;determines the outcome of the quality
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;確定質量的結果&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;of the overall assembled model as well
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;對整體組裝模型&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;So for us to get a good high fidelity solution
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;所以為我們得到一個良好的高保真度解決方案&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;you have to have a really good connection generation as well
&lt;p&gt;&lt;b&gt;&lt;font color="#    #0044BB"&gt;你必須有一個非常好的連接生成&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;翻譯心得:是由40423141翻譯的，也讓我們練習英文，針對專有名詞找延伸資料&lt;/p&gt;</summary><category term="syllabus"></category><category term="w3"></category></entry><entry><title>20170302 第二週</title><link href="./2017spring-cd-W2.html" rel="alternate"></link><published>2017-03-02T00:00:00+08:00</published><updated>2017-03-02T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-03-02:./2017spring-cd-W2.html</id><summary type="html">&lt;p&gt;利用solvespace四連桿組立，並導入Vrep。&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第二週&lt;/h2&gt;
&lt;p&gt;Solvespace組立四連桿機構&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yO1onYoPCGw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="syllabus"></category><category term="w2"></category></entry><entry><title>20170223 第一週</title><link href="./2017spring-cd-W1.html" rel="alternate"></link><published>2017-02-23T00:00:00+08:00</published><updated>2017-02-23T00:00:00+08:00</updated><author><name>40423146</name></author><id>tag:,2017-02-23:./2017spring-cd-W1.html</id><summary type="html">&lt;p&gt;利用 Solvespace 與 Onshape 組立單軸旋轉連桿系統、四連桿系統與多連桿系統。&lt;/p&gt;
&lt;p&gt;利用python程式碼控制Vrep裡的單連桿作動。&lt;/p&gt;


&lt;h2&gt;協同產品設計實習課程 第一週&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;利用 Solvespace 與 Onshape 組立單軸旋轉連桿系統、四連桿系統與多連桿系統&lt;/li&gt;
&lt;li&gt;ipv4和ipv6設定 &lt;/li&gt;
&lt;li&gt;分組方式,如何更有效的決定 &lt;/li&gt;
&lt;li&gt;小組組織跟分工的重要性 &lt;/li&gt;
&lt;li&gt;要主動教導不會的同學 &lt;/li&gt;
&lt;li&gt;ipconfig設定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下載fourbar_eightbar_solvespace_vrep.7z以及onelink_vrep_remoteapi_pos_vel.7z兩個檔案。
分別是單連桿、四連桿及八連桿，在solvespace及Vrep裡開啟。&lt;/p&gt;
&lt;p&gt;在Vrep裡開啟one_link_robot_remoteAPI.ttt。(Vrep副檔名為ttt)
在SciTE裡開啟one_link_robot_remoteAPI_joint_target_vel.py。
按下Tool裡的Go即可開始控制單連桿，按Enter會旋轉，按P會暫停。&lt;/p&gt;
&lt;p&gt;Onshape零件繪製&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/fpQ7Dlqomwk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Onshape零件組裝&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bOZeNMrcTr0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="syllabus"></category><category term="w1"></category></entry></feed>